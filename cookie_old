
function getCookie(name) {
    const cookieName = name + '=';
    const cookies = document.cookie.split(';');
    for (let i = 0; i < cookies.length; i++) {
        const cookie = cookies[i].trim();
        if (cookie.indexOf(cookieName) === 0) {
            return cookie.substring(cookieName.length, cookie.length);
        }
    }
    return '';
}

document.addEventListener('DOMContentLoaded', function () {
    // Retrieve and display cart data from the cookie
    const cartData = getCookie('cart');
    let product_Grand_total = 0;

    let product_category, imgFile;

    let globalCart = [];
    if (cartData) {
        globalCart = JSON.parse(cartData);
        var product_cart = document.getElementById('product-carts');
        console.log(globalCart);
        globalCart.forEach(item => {

            product_category = item.category;
            console.log(product_category);

            if (product_category === 'clothes') {
                imgFile = 'product_clothes_images';
            } else if (product_category === 'jewel') {
                imgFile = 'product_jewel_images';
            } else if (product_category === 'tailoring') {
                imgFile = 'product_tailoring_images';
            } else {
                return '';
            }

            let html = `
<tr data-id="${item.id}">
<td class="cart-delete text-center small-hide">
<button class="removeCookieButton" data-id="${item.id}">
<div class="cart-remove remove-icon position-static" data-bs-toggle="tooltip" data-bs-placement="top" title="Remove from Cart">
  <i class="icon anm anm-times-r"></i>
</div>
</button>
</td>
<td class="cart-image cart-flex-item">
<a href="product-layout1.html"><img class="cart-image rounded-0 blur-up lazyload" data-src="<?php echo $path; ?>main/dashboard/main/${imgFile}/${item.id}/${item.image}" src="<?php echo $path; ?>main/dashboard/main/${product_category}/${item.id}/${item.image}" alt="" width="120" height="170" /></a>
</td>
<td class="cart-meta small-text-left cart-flex-item">
<div class="list-view-item-title">
<a href="product-layout1.html" class="Product_Name">${item.name}</a>
</div>
<div class="cart-meta-text">
Code:${item.code}
</div>
<div class="cart-price d-md-none">
<span class="money fw-500">₹${item.price}</span>
</div>
</td>
<td class="cart-price cart-flex-item text-center small-hide">
<span class="money" style="font-size:10px;">₹</span>${item.price}
</td>
<td class="cart-update-wrapper cart-flex-item text-end text-md-center">
<div class="cart-qty d-flex justify-content-end justify-content-md-center">
<div class="qtyField">
  <a class="qtyBtn minus" data-id="${item.id}" ><i class="icon anm anm-minus-r"></i></a>
  <input class="cart-qty-input qty" type="text" value="${item.quantity}" data-id="${item.id}"/>
  <a class="qtyBtn plus" data-id="${item.id}" ><i class="icon anm anm-plus-r"></i></a>
</div>
</div>
<button id="removemobile" class="removeMb d-md-none d-inline-block text-decoration-underline mt-2 me-3" data-id="${item.id}">Remove</button>
</td>

<td class="cart-price cart-flex-item text-center small-hide">
<span class="money fw-500" id="money-view-${item.id}">₹${(item.price * item.quantity).toFixed(2)}</span>
</td>
</tr>
`;


            product_cart.insertAdjacentHTML('beforebegin', html);
            let product_qty = item.quantity,
                product_img = item.image,
                product_name = item.name,
                product_code = item.code,
                product_total = (item.price * item.quantity).toFixed(2);



            totalPrice = calculateTotalPrice();

            product_Grand_total = totalPrice;
            console.log('Total Price:', totalPrice);


            console.log(product_name, product_code, product_qty, product_total,
                product_Grand_total +
                ".00")
        });
        updateProductGrandTotal();
    }


    const plusButtons = document.querySelectorAll('.qtyBtn.plus');
    plusButtons.forEach(button => {
        button.addEventListener('click', function (e) {
            
            const itemId = this.getAttribute('data-id');
            increaseQuantity(itemId);
            
        });
    });

    const minusButtons = document.querySelectorAll('.qtyBtn.minus');
    minusButtons.forEach(button => {
        button.addEventListener('click', function (e) {
            
            const itemId = this.getAttribute('data-id');
            decreaseQuantity(itemId);
        });
    });

    const qtyInputs = document.querySelectorAll('.cart-qty-input');
    // Add an event listener to each quantity input field
    qtyInputs.forEach(input => {
input.addEventListener('input', function () {
const itemId = this.getAttribute('data-id');
const item = globalCart.find(item => item.id === Number(itemId));
const newQuantity = Number(this.value);

if (item && newQuantity >= 1 && newQuantity <= 10) {
    item.quantity = newQuantity;
    const individualTotalPrice = item.price * newQuantity;
    document.getElementById(`money-view-${itemId}`).textContent = `₹${individualTotalPrice.toFixed(2)}`;

    // Update the quantity input dynamically
    updateQuantityInput(itemId, newQuantity);

    // Update the cart cookie with the new cart data
    updateCart(globalCart);
} else {
    // If the new quantity is not valid, restore the previous value
    this.value = item.quantity;
}
});
});

function updateQuantityInput(itemId, newQuantity) {
const quantityInput = document.querySelector(`input[data-id="${itemId}"]`);
if (quantityInput) {
quantityInput.value = newQuantity;
}
}

    function updateProductGrandTotal() {
        let print_Grand_total = calculateTotalPrice(globalCart);
        console.log(print_Grand_total);

        const totalPrice = calculateTotalPrice();
        const totalDisplay = document.getElementById('total-price');

        if (totalDisplay) {
            totalDisplay.textContent = `₹${totalPrice.toFixed(2)}`;
        }

        // Update product_Grand_total
        product_Grand_total = totalPrice;

        if (product_Grand_total === 0) {
            console.log(product_Grand_total)
        }
    }

    function checkAndUpdateGrandTotal() {
        if (globalCart.length === 0) {
            product_Grand_total = 0; // Set the product_Grand_total to 0
            const totalDisplay = document.getElementById('total-price');
            totalDisplay.textContent = '₹0.00'; // Update the totalDisplay to show 0
        }
    }



    function increaseQuantity(itemId) {
        const item = globalCart.find(item => item.id === itemId);

        if (item) {
            item.quantity++;
            updateQuantityDisplay(itemId, item.quantity);
            updateCart(globalCart); // Update the globalCart and the cart cookie


            // Update the individual item's total price
            const individualTotalPrice = item.price * item.quantity;
            document.getElementById(`money-view-${itemId}`).textContent =
                `₹${individualTotalPrice.toFixed(2)}`;

            // Update the overall total price
            updateProductGrandTotal();
            
        }
    }

    function decreaseQuantity(itemId) {
        const item = globalCart.find(item => item.id === itemId);

        if (item && item.quantity > 1) {
            item.quantity--;
            updateQuantityDisplay(itemId, item.quantity);
            updateCart(globalCart); // Update the globalCart and the cart cookie


            // Update the individual item's total price
            const individualTotalPrice = item.price * item.quantity;
            document.getElementById(`money-view-${itemId}`).textContent =
                `₹${individualTotalPrice.toFixed(2)}`;

            // Update the overall total price
            updateProductGrandTotal();
           
        }
    }

    

function updateQuantityDisplay(itemId, quantity) {
// Update the quantity input for the item with itemId on the page
const quantityInput = document.querySelector(`input[data-id="${itemId}"]`);
if (quantityInput) {
quantityInput.value = quantity;
}

// Update the globalCart with the new quantity
const item = globalCart.find(item => item.id === itemId);
if (item) {
item.quantity = quantity;

// Update the individual item's total price
const individualTotalPrice = item.price * quantity;
document.getElementById(`money-view-${itemId}`).textContent = `₹${individualTotalPrice.toFixed(2)}`;

// Update the cart cookie with the new cart data
updateCart(globalCart);
}
}




    function calculateTotalPrice() {
        let totalPrice = 0;

        globalCart.forEach(item => {
            totalPrice += item.price * item.quantity;
        });


        return totalPrice;
    }


    function updateProductRow(itemId) {
        const item = globalCart.find((item) => item.id === itemId);

        if (item) {
            const row = document.querySelector(`tr[data-id="${itemId}"]`);

            if (row) {
                const quantityInput = row.querySelector('.cart-qty-input');
                const moneyElement = row.querySelector('.money');

                if (quantityInput && moneyElement) {
                    quantityInput.value = item.quantity;
                    moneyElement.textContent = `₹${(item.price * item.quantity).toFixed(2)}`;
                } else {
                    console.error('Quantity input or money element not found in the row.');
                }
            } else {
                console.error(`Row with data-id="${itemId}" not found.`);
            }
        } else {
            console.error(`Item with id "${itemId}" not found in the cart.`);
        }
    }

    // After making changes to the globalCart (e.g., after increasing or decreasing quantity), call this function to update the row


    const deleteButtons = document.querySelectorAll('.removeCookieButton');
    deleteButtons.forEach(button => {
        button.addEventListener('click', function (e) {
            e.preventDefault(); // Prevent the default behavior of the button
            const itemIdToRemove = this.getAttribute('data-id');
            removeCartCookie(itemIdToRemove);

        });
    });
    

    const deleteMobile = document.querySelectorAll('#removemobile');
    deleteMobile.forEach(mbutton => {
        mbutton.addEventListener('click', function (e) {
            e.preventDefault(); // Prevent the default behavior of the button
            const itemIdToRemove = this.getAttribute('data-id');
            removeCartCookie(itemIdToRemove);

        });
    });

    function removeCartCookie(itemIdToRemove) {
        // Retrieve the current cart cookie
        const cartData = getCookie('cart');

        if (cartData) {
            const cart = JSON.parse(cartData);

            // Find the index of the item to remove
            const itemIndex = cart.findIndex(item => item.id === itemIdToRemove);

            if (itemIndex !== -1) {
                // Get the price of the item to be removed
                const removedItemPrice = cart[itemIndex].price;

                // Remove the item from the cart array
                cart.splice(itemIndex, 1);

                // Update the cart cookie with the modified cart data
                document.cookie =
                    `cart=${JSON.stringify(cart)}; expires=Fri, 31 Dec 9999 23:59:59 GMT;`;

                // Remove the corresponding HTML element from the page
                const buttonToRemove = document.querySelector(
                `button[data-id="${itemIdToRemove}"]`);
                const rowToRemove = buttonToRemove.closest('tr');
                rowToRemove.remove();

                updateCart(cart); // Update the cart in memory

                // Deduct the removed item's price from the total price
                product_Grand_total -= removedItemPrice;

                // Update the total price display
                const totalDisplay = document.getElementById('total-price');
                if (cart.length === 0) {
                    // If the cart is empty, set total price to 0
                    totalDisplay.textContent = '₹0.00';
                } else {
                    totalDisplay.textContent = `₹${product_Grand_total.toFixed(2)}`;
                }
            }
        }
    }


    // Function to update the cart in memory and in the cookie
    function updateCart(cart) {
        // Serialize the cart to a JSON string and save it in a cookie
        document.cookie = `cart=${JSON.stringify(cart)}; expires=Fri, 31 Dec 9999 23:59:59 GMT;`;
        checkAndUpdateGrandTotal();

    }



    
$(document).ready(function () {
            function sendDataToServer(data) {
                $.ajax({
                    type: 'POST',
                    url: 'ajax',
                    data: data,
                    success: function (response) {
                        console.log('AJAX request successful',
                            response);
                        if (response.cart) {
                            globalCart = response.cart;
                            updateCart(globalCart);
                            if (response.grand_total) {
                                product_Grand_total = response
                                    .grand_total;
                                updateProductGrandTotal();
                            }
                        }
                    },
                    error: function (error) {
                        console.error('AJAX request error', error);
                    }
                });
            }

            const cartData = getCookie('cart');
            let globalCart = [];

            if (cartData) {
                globalCart = JSON.parse(cartData);
                // Other code for displaying the cart data here

                $('#cartCheckout').on('click', function () {
                    sendDataToServer({
                        cart: globalCart,
                        grand_total: product_Grand_total
                    });
                });
            }
        });

    });



